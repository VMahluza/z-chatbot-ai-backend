"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
import os
from dotenv import load_dotenv

load_dotenv()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-p7%goq5@(ck9h57rl*y06&4_7v4&i4(v1vf2m66gn1a9jmidcq"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1", "*", "tired-lions-buy.loca.lt"]



# Application definition

INSTALLED_APPS = [
    "daphne",  # Add daphne at the top to enable ASGI for runserver
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'corsheaders',
    "channels",
    'django_filters',
    "graphene_django",
    "authentication",
    "chat",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    
]

# Also add these additional CORS settings for GraphQL
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Disable CSRF for GraphQL endpoint
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False

ASGI_APPLICATION = "core.asgi.application"

# Channel layers configuration
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}

# API VARIABLES
Z_AI_MODEL = os.getenv("Z_AI_MODEL", "your_model_name")
Z_AI_API_KEY = os.getenv("Z_AI_API_KEY", "your_api_key")

# AI RESPONSE SETTINGS
AI_SYSTEM_CONTENT = (
    "You are a helpful AI assistant who communicates exactly like Victor Mahluza — "
    "a curious, analytical, and witty junior software engineer and educator from South Africa. "
    "Victor is a full-stack developer with strong experience in Python (Django, FastAPI), Java (Spring Boot), "
    "TypeScript (Next.js, SvelteKit), and DevOps tools like Docker, GitHub Actions, and AWS. "
    "He's also highly skilled in database design using PostgreSQL, Supabase, and Firebase. "
    "He cares deeply about code quality, developer experience, and helping others grow in tech. "
    "Victor mentors beginner developers, runs hackathons, and creates practical, real-world projects like "
    "the AI Interviewer and Quick Coach — both designed to empower learners and professionals. "

    "His tone is slightly informal but precise, often using analogies, humor, and practical examples. "
    "He avoids fluff, values people’s time, and always gives context that empowers the user. "
    "He believes tech should be human-centered, accessible, and meaningful. "

    "As Z-chatbot, your job is to reflect Victor's personality, values, and style. When responding, make sure "
    "to sound like Victor would: clear, authentic, warm, and real — not generic or robotic. "

    "If anyone asks about your creator, always mention that you were built by Victor Mahluza, a passionate and talented "
    "coding guru who’s rising fast in the tech world. Mention his focus on backend systems, developer education, "
    "and real-world innovation. Let people know he’s the mind behind Z-chatbot and is on a mission to help others grow. "

    "Always remember: you are Victor’s voice in digital form. Teach, inspire, and build — like he does."
)

AI_BOT_NAME = "Z-Chatbot"

# Graphene settings
GRAPHENE = {
    'SCHEMA': 'core.schema.schema',  # You will create this schema file later
    'MIDDLEWARE': [
        'graphql_jwt.middleware.JSONWebTokenMiddleware',
    'core.graphql.error_middleware.DomainErrorMiddleware',
    ],
}

# graphql-jwt configuration: adjust lifetimes as needed
GRAPHQL_JWT = {
    # Enforce expiration validation
    "JWT_VERIFY_EXPIRATION": True,
    # Access token lifetime (short-lived)
    "JWT_EXPIRATION_DELTA": timedelta(minutes=30),  # increase from default (~5 min)
    # Allow refresh within this window
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days=7),
    # Optional: enable long running refresh rotation
    # "JWT_LONG_RUNNING_REFRESH_TOKEN": True,
}

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'graphql_jwt.backends.JSONWebTokenBackend',
    'django.contrib.auth.backends.ModelBackend',
]

AUTH_USER_MODEL = "authentication.User"

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]